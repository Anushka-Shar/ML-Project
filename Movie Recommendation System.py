# -*- coding: utf-8 -*-
"""Copy of Untitled9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UPz7h-f7UJLo874mHDFm10fXYCPdesAt

# **Title of Project** : Movie Recommendation System

---

# **Objective :** The objective of this project is to build a movie recommendation system using various machine learning techniques which will recommend movies to the users on the basis of their previous viewing behaviour and preferences.

---

# **Data Source** : The dataset used in this project are obtained from various sources, such as movie databases, user ratings, and demographic information. Some of the common sources include IMDb, MovieLens, or other publicly available movie datasets.

# **Import Library :**

# **pandas** : Used this library for data manipulation and analysis.
# **numpy** : Used numpy for numerical operations and computations.
# **scikit-learn** : Used for implementing machine learning algorithms.
# **Import Data** : Used to load the movie dataset containing information such as movie titles, genres, user ratings, and user preferences into the Colab notebook.


---

# **Describe Data** : Perform exploratory data analysis (EDA) to gain insights into the dataset, understand the distribution of movie ratings, and identify any patterns or trends.


---

# **Data Preprocessing** : Identifies the incorrect, incomplete or irrelevant parts of data and corrects it.


---

# **Modeling** : Implements content-based filtering algorithm such as matrix factorization, to create the movie recommendation system.

# **Model Evaluation**  : Defines the performance of the recommendation system using appropriate evaluation metrics, such as precision, recall, or mean squared error, to measure the accuracy of the recommendations.


---

# **Import the libraries**
"""

import pandas as pd

import numpy as np

"""# **Import Dataset**"""

df = pd.read_csv("https://github.com/YBI-Foundation/Dataset/raw/main/Movies%20Recommendation.csv")

df.head()

df.info()

df.describe()

df.shape

df.columns

"""# **Get feature selection**"""

movie_features = df[['Movie_Genre', 'Movie_Keywords', 'Movie_Tagline','Movie_Cast', 'Movie_Director']].fillna('')

movie_features.shape

movie_features

x = movie_features['Movie_Genre'] +' ' + movie_features['Movie_Keywords'] +' ' + movie_features['Movie_Cast'] +' ' + movie_features['Movie_Director']

x

x.shape

"""# **Get Feature Text Conversion to Tokens**"""

from sklearn.feature_extraction.text import TfidfVectorizer

tfidf = TfidfVectorizer()

x = tfidf.fit_transform(x)

x.shape

print(x)

"""# **Get imilarity Score Using Cosine Similarity**"""

from sklearn.metrics.pairwise import cosine_similarity

Similarity_Score = cosine_similarity(x)

Similarity_Score

Similarity_Score.shape

"""# **Get movie name as input from user and validate for closest spelling**"""

Favourite_Movie_Name = input("Enter your favourite movie name : ")

All_Movies_Title_List = df["Movie_Title"].tolist()

import difflib

Movie_Recommendation = difflib.get_close_matches(Favourite_Movie_Name, All_Movies_Title_List)

Close_Match = Movie_Recommendation[0]

Index_of_Close_Match_Movie = movie[movie.Movie_Title == Close_Match]['Movie_ID'].values[0]

"""# **Getting a list of similar movies**"""

Recommendation_Score = list(enumerate(Similarity_Score[Index_of_Close_Match_Movie]))

len(Recommendation_Score)

"""# **Get all movies sort based on recommendation score with respect to favourite movie**"""

#sorting the movies based on their similariyt score
Sorted_Similar_Movies = sorted(Recommendation_Score, key = lambda x:x[1], reverse = True)

#print the name of similar movies based on the index
print('Top 30 Movies Suggested for You : \n')

i = 1

for movie in Sorted_Similar_Movies:

  index = movie[0]

  title_from_index = df[df.index == index]['Movie_Title'].values[0]

  if (i<31):

    print(i, '.', title_from_index)

    i += 1

"""# **Top 10 Movie Recommendation System**"""

Movie_Name = input('Enter your favourite movie name : ')

list_of_all_titles = df['Movie_Title'].tolist()

Find_Close_Match = difflib.get_close_matches(Movie_Name, list_of_all_titles)

Close_Match = Find_Close_Match[0]

Index_of_Movie = df[df.Movie_Title == Close_Match]['Movie_ID'].values[0]

Recommendation_Score = list(enumerate(Similarity_Score[Index_of_Movie]))

sorted_similar_movies = sorted(Recommendation_Score, key = lambda x:x[1], reverse = True)

print("Top 10 Movies suggested for you : \n")

i = 1

for movie in sorted_similar_movies:

  index = movie[0]

  title_from_index = df[df.Movie_ID == index]['Movie_Title'].values

  if (i<11):

    print(i, '.', title_from_index)

"""# **Conclusion** : This machine learning project will help the users to get recommendations of the movies according to their previous searches and historical data.

---


"""